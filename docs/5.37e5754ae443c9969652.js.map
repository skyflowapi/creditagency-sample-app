{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/Typography/Typography.js","webpack:///./src/components/Card/index.js"],"names":["defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","Typography_Typography","react","props","ref","_props$align","align","classes","className","_props$color","color","component","_props$display","display","_props$gutterBottom","gutterBottom","_props$noWrap","noWrap","_props$paragraph","paragraph","_props$variant","variant","_props$variantMapping","variantMapping","other","Object","objectWithoutProperties","Component","esm_extends","clsx_m","root","concat","capitalize","esm_Typography_Typography","withStyles","theme","margin","typography","caption","button","overline","srOnly","position","height","width","overflow","alignLeft","textAlign","alignCenter","alignRight","alignJustify","textOverflow","whiteSpace","marginBottom","colorInherit","colorPrimary","palette","primary","main","colorSecondary","secondary","colorTextPrimary","text","colorTextSecondary","colorError","error","displayInline","displayBlock","name","useStyles","makeStyles","flexGrow","paper","_objectSpread","objectFit","marginTop","spacing","black","image","marginLeft","alignItems","CardComp","_ref","type","handlePage","jsx_default","Grid","container","item","xs","justify","Paper","style","cursor","onClick","src","alt"],"mappings":"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","file":"5.37e5754ae443c9969652.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n    srOnly: {\n      position: 'absolute',\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 250,\n    width: 350,\n    \n  },\n  \n  text: {\n    textAlign: \"center\",\n    objectFit: \"contain\",\n   ...theme.typography.h5,\n   marginTop:theme.spacing(10),\n    color: theme.palette.black,\n  },\n  image: {\n    \n    marginTop: theme.spacing(5),\n    marginLeft: theme.spacing(30),\n    alignItems: \"center\",\n  },\n}));\n\nexport default function CardComp({ type, text,handlePage }) {\n  \n  const classes = useStyles();\n\n  return (\n    \n    <Grid container className={classes.root} spacing={0}>\n      <Grid item xs={12}>\n        <Grid container justify=\"center\" spacing=\"10\">\n          <Grid item>\n            <Paper style={{ cursor: \"pointer\" }} className={classes.paper} onClick={handlePage}>\n              \n                <img className={classes.image} src={type} alt=\"student\"></img>\n              \n              <Typography className={classes.text}>{text}</Typography>\n            </Paper>\n          </Grid>\n          \n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n"],"sourceRoot":""}